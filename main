let board = [
  ['','','',''],
  ['','','',''],
  ['','','',''],
  ['','','',''],
];

let gridSize;
let numberOfSpots;
let offset;

let mousePos = [0, 0];

let turn = true; //X
let gameOver = false;
let winner;

let scores = {
  'X' : -10,
  'O' : 10,
  'tie' : 0
};

function setup() {
  createCanvas(800, 800);
  
  numberOfSpots = 3;
  gridSize = width/numberOfSpots;
  offset = gridSize/4;
  
  player1 = new Player('X');
  player2 = new Player('O');
}

function draw() {
  background(220);
  strokeWeight(2);

  for (let i = 0; i < numberOfSpots; i++) {
    for (let j = 0; j < numberOfSpots; j++) {
      //draw grid and characters from board
      line(i * gridSize, j, i * gridSize, j + gridSize*numberOfSpots);
      line(i, j * gridSize, i + gridSize*numberOfSpots, j * gridSize);
      
      //draw X's and O's
      textSize(gridSize/1.5);
      text(board[i][j], i*gridSize + offset, j*gridSize + gridSize - offset);
    }
  }
  
  //get position of mouse on grid
  //get available working, use it in check win for tie
  mousePos = [floor(mouseX/gridSize), floor(mouseY/gridSize)];
  
  if (gameOver) {
    textSize(30);
    text('winner: ' + winner, 25, 30);
  }
  
  
  textSize(30);
  text(mousePos[0], width - 200, height - 50);
  text(mousePos[1], width - 75, height - 50);
}

function mouseClicked() {
  if (board[mousePos[0]][mousePos[1]] == '' && !gameOver) {
    if (turn) {
      player1.play(mousePos[0], mousePos[1]);
      turn = false;
      
      //computer move
      let move = bestMove(); 
      player2.play(move[0], move[1]);
      turn = true;
    
    // } else {
    //   player2.play(mousePos[0], mousePos[1]);
    //   turn = true;
    }
    if (checkWin() != false) {
      gameOver = true;
      winner = checkWin();
      print(winner);
    }
  }
}

function checkWin() {
  let cha;
  
  for (let a = 0; a < 2; a++) {
    if (a == 0) {
      cha = player1.character;
    } else {
      cha = player2.character;
    }
    
    //check rows and columns
    for (let i = 0; i < numberOfSpots; i++) {
      if (board[i][0] == cha && board[i][1] == cha && board[i][2] == cha) {
        return cha.toString();
      } else if (board[0][i] == cha && board[1][i] == cha && board[2][i] == cha) {
        return cha.toString();
      }
    }
    
    //check diagnols
    if (board[0][0] == cha && board[1][1] == cha && board[2][2] == cha) {
      return cha.toString();
    } else if (board[2][0] == cha && board[1][1] == cha && board[0][2] == cha) {
      return cha.toString();
    }
  }
    
  
  //check for tie
  let openSpots = 0;
  for (let i = 0; i < numberOfSpots; i++) {
    for (let j = 0; j < numberOfSpots; j++) {
      if (board[i][j] == '') {
        openSpots++;
      }
    }
  }
  
  if (openSpots == 0) {
    return 'tie';
  }
  
  return false;
}

function bestMove() {
  let bestScore = -Infinity;
  let bestSpot;
  
  for (let i = 0; i < numberOfSpots; i++) {
    for (let j = 0; j < numberOfSpots; j++) {
      
      if (board[i][j] == '') {
        board[i][j] = player2.character;
        let score = minimax(board, 0, false);
        board[i][j] = '';
        
        if (score > bestScore) {
          bestScore = score;
          bestSpot = { i, j };
        }
      }
    
    }
  }
  
  return [bestSpot.i, bestSpot.j]

}

function minimax(board, depth, isMaximizing) {
  let result = checkWin();
  
  //check if terminal state
  if (result != false) {
    return scores[result];
  }
  
  if (isMaximizing) {
    let bestScore = -Infinity;
    
    for (let i = 0; i < numberOfSpots; i++) {
      for (let j = 0; j < numberOfSpots; j++) {
        if (board[i][j] == '') {
          board[i][j] = player2.character;
          let score = minimax(board, depth + 1, false);
          board[i][j] = '';
          bestScore = max(bestScore, score);
        }
      }
    }
    return bestScore;
    
  } else {
    let bestScore = Infinity;
    
    for (let i = 0; i < numberOfSpots; i++) {
      for (let j = 0; j < numberOfSpots; j++) {
        if (board[i][j] == '') {
          board[i][j] = player1.character;
          let score = minimax(board, depth + 1, true);
          board[i][j] = '';
          bestScore = min(bestScore, score);
        }
      }
    }
    return bestScore;
  }
}

class Player {
  constructor(cha) {
    this.character = cha;
  }
  
  play(posX, posY) {
    board[posX][posY] = this.character;
  }
}
